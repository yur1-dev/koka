generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  isAdmin            Boolean         @default(false)
  // avatarUrl          String?
  bio                String?
  walletAddress      String?         @unique
  coverUrl           String?
  accountNumber      Int?
  hasReceivedAirdrop Boolean         @default(false)
  hasClaimedStarter  Boolean         @default(false)  // NEW: For all users
  whitelistData      Json?
  isFounder          Boolean         @default(false)  // For first 50 only
  accounts           Account[]
  inventory          InventoryItem[]
  sessions           Session[]
  receivedTrades     Trade[]         @relation("Receiver")
  sentTrades         Trade[]         @relation("Sender")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Collectible {
  id          String          @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  rarity      String
  attributes  Json?
  inventory   InventoryItem[]

  @@map("collectible")
}

model InventoryItem {
  id            String      @id @default(cuid())
  userId        String
  collectibleId String
  quantity      Int
  createdAt     DateTime    @default(now())
  receivedVia   String?
  airdropNumber Int?
  collectible   Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
  @@map("inventory_item")
}

model Trade {
  id             String   @id @default(cuid())
  senderId       String
  receiverId     String
  status         String
  offeredItems   Json?
  requestedItems Json?
  createdAt      DateTime @default(now())
  receiver       User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender         User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("trade")
}