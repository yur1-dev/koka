// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Keep all your models as they are...

// User model for authentication
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?        // For credentials-based auth
  isAdmin       Boolean        @default(false) // FIX: Added isAdmin field
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  accounts      Account[]
  sessions      Session[]

  inventory     InventoryItem[]
  sentTrades    Trade[]        @relation("Sender")
  receivedTrades Trade[]       @relation("Receiver")

  @@map("users")
}

// OAuth accounts (Google, GitHub, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session management
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Email verification tokens
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Add your custom models below
model Collectible {
  id          String          @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  rarity      String
  inventory   InventoryItem[]

  @@map("collectible")
}

model InventoryItem {
  id            String     @id @default(cuid())
  userId        String
  collectibleId String
  quantity      Int
  createdAt     DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectible   Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
  @@map("inventory_item")
}

model Trade {
  id            String   @id @default(cuid())
  senderId      String
  receiverId    String
  status        String   // e.g., "pending", "accepted", "rejected"
  offeredItems  Json?    // Or use relations if items are complex
  requestedItems Json?   // Or use relations
  createdAt     DateTime @default(now())

  sender        User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("trade")
}