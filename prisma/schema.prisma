// prisma/schema.prisma (FULLY FIXED: Added attributes Json? to Collectible for seed data; All relations intact)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL") // Use direct URL for migrations
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  username             String?                // For display/separate from email
  image                String?                // For NextAuth providers
  password             String?
  walletAddress        String?                @unique
  isAdmin              Boolean                @default(false)
  accountNumber        Int                    @unique                    // Manual increment in code (no @default)
  points               Int                    @default(100)
  hasClaimedStarter    Boolean                @default(false)
  hasReceivedAirdrop   Boolean                @default(false)
  whitelistData        Json?
  isFounder            Boolean                @default(false)            // For whitelist
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Relations
  inventoryItems       InventoryItem[]
  marketplaceListings  MarketplaceListing[]
  purchases            Transaction[]          @relation("buyer")
  sales                Transaction[]          @relation("seller")
  sentTrades           Trade[]                @relation("SentTrades")    // For leaderboard
  receivedTrades       Trade[]                @relation("ReceivedTrades") // For leaderboard

  @@index([email])
  @@index([walletAddress])
  @@index([accountNumber])
}

model Collectible {
  id               String   @id @default(cuid())
  name             String
  description      String?
  imageUrl         String?
  mintAddress      String?  // For Solana mint address
  rarity           String   // common, uncommon, rare, epic, legendary
  maxSupply        Int?
  currentSupply    Int      @default(0)
  attributes       Json?    // FIXED: Added for seed attributes { power: 98, ... }
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  inventoryItems   InventoryItem[]
  marketplaceListings MarketplaceListing[]
  transactions     Transaction[]
  trades           Trade[]

  @@index([rarity])
  @@index([mintAddress])
}

model InventoryItem {
  id              String      @id @default(cuid())
  userId          String
  collectibleId   String
  quantity        Int         @default(1)
  isClaimed       Boolean     @default(false)
  receivedVia     String?     // "starter-pack", "airdrop", "purchase", "claimed"
  airdropNumber   Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectible     Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
  @@index([userId])
  @@index([collectibleId])
}

model MarketplaceListing {
  id              String            @id @default(cuid())
  userId          String
  collectibleId   String
  price           Float             // SOL decimals (e.g., 0.5)
  description     String?
  quantity        Int               @default(1)
  status          MarketplaceStatus @default(active)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectible     Collectible       @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
  transaction     Transaction?

  @@unique([userId, collectibleId])
  @@index([userId])
  @@index([collectibleId])
  @@index([status])
}

model Transaction {
  id              String             @id @default(cuid())
  buyerId         String
  sellerId        String
  collectibleId   String
  listingId       String             @unique
  price           Float
  quantity        Int
  createdAt       DateTime           @default(now())

  // Relations
  buyer           User               @relation("buyer", fields: [buyerId], references: [id])
  seller          User               @relation("seller", fields: [sellerId], references: [id])
  collectible     Collectible        @relation(fields: [collectibleId], references: [id])
  listing         MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([collectibleId])
  @@index([createdAt])
}

model Trade {
  id             String   @id @default(cuid())
  senderId       String
  receiverId     String
  collectibleId  String
  quantity       Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sender         User     @relation("SentTrades", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User     @relation("ReceivedTrades", fields: [receiverId], references: [id], onDelete: Cascade)
  collectible    Collectible @relation(fields: [collectibleId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([collectibleId])
}

enum MarketplaceStatus {
  active
  sold
  cancelled
}

model Otp {
  id        String   @id @default(cuid())
  email     String   @unique  // Ties to user email (matches User.email)
  otpHash   String   // Hashed OTP (bcrypt for security)
  expiresAt DateTime // Expire after 5-10 min
  createdAt DateTime @default(now())

  @@map("otps")  // Optional: Maps to 'otps' table in DB
}