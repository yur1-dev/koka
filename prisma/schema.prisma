// prisma/schema.prisma
// FIXED: Added mintAddress to Collectible for Solana mint; Price to Float for SOL decimals; Added MarketplaceStatus enum; Unique on userId+collectibleId for listings; Minor index tweak

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(cuid())
  email                String                 @unique
  name                 String?
  password             String?
  walletAddress        String?                @unique
  isAdmin              Boolean                @default(false)
  accountNumber        Int                    @unique @default(autoincrement())
  points               Int                    @default(100)
  hasClaimedStarter    Boolean                @default(false)
  hasReceivedAirdrop   Boolean                @default(false)
  whitelistData        Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Relations
  inventoryItems       InventoryItem[]
  marketplaceListings  MarketplaceListing[]
  purchases            Transaction[]          @relation("buyer")
  sales                Transaction[]          @relation("seller")

  @@index([email])
  @@index([walletAddress])
}

model Collectible {
  id                   String                 @id @default(cuid())
  name                 String
  description          String?
  imageUrl             String?
  mintAddress          String?                // FIXED: Added for Solana mint address
  rarity               String                 // common, uncommon, rare, epic, legendary
  maxSupply            Int?
  currentSupply        Int                    @default(0)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  
  // Relations
  inventoryItems       InventoryItem[]
  marketplaceListings  MarketplaceListing[]
  transactions         Transaction[]

  @@index([rarity])
  @@index([mintAddress]) // NEW: Index for quick mint lookups
}

model InventoryItem {
  id              String      @id @default(cuid())
  userId          String
  collectibleId   String
  quantity        Int         @default(1)
  isClaimed       Boolean     @default(false)
  receivedVia     String?     // "starter-pack", "airdrop", "purchase", "claimed"
  airdropNumber   Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectible     Collectible @relation(fields: [collectibleId], references: [id], onDelete: Cascade)

  @@unique([userId, collectibleId])
  @@index([userId])
  @@index([collectibleId])
}

model MarketplaceListing {
  id              String            @id @default(cuid())
  userId          String
  collectibleId   String
  price           Float             // Changed to Float for SOL decimals (e.g., 0.5)
  description     String?
  quantity        Int               @default(1)
  status          MarketplaceStatus @default(active) // Enum for validation
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  collectible     Collectible       @relation(fields: [collectibleId], references: [id], onDelete: Cascade)
  transaction     Transaction?

  @@unique([userId, collectibleId]) // Prevent dupes per user/collectible
  @@index([userId])
  @@index([collectibleId])
  @@index([status])
}

model Transaction {
  id              String             @id @default(cuid())
  buyerId         String
  sellerId        String
  collectibleId   String
  listingId       String             @unique
  price           Float              // Align with listing price (Float)
  quantity        Int
  createdAt       DateTime           @default(now())

  // Relations
  buyer           User               @relation("buyer", fields: [buyerId], references: [id])
  seller          User               @relation("seller", fields: [sellerId], references: [id])
  collectible     Collectible        @relation(fields: [collectibleId], references: [id])
  listing         MarketplaceListing @relation(fields: [listingId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@index([collectibleId])
  @@index([createdAt]) // For recent sales queries
}

enum MarketplaceStatus {
  active
  sold
  cancelled
}

// ---
// After updating schema, run:
// npx prisma generate
// npx prisma db push  (or npx prisma migrate dev if using migrations)